#pragma once

#include "bswap_util.h"

/* Do not edit.  Generated by 'wiregen.py itch5x.idl' */

enum itch5x_message_type {
    ITCH5X_MT_SYSTEM_EVENT             = 'S',
    ITCH5X_MT_STOCK_DIRECTORY          = 'R',
    ITCH5X_MT_STOCK_TRADING_ACTION     = 'H',
    ITCH5X_MT_REG_SHO_RESTRICTED_IND   = 'Y',
    ITCH5X_MT_MKT_PARTICIPANT_POSITION = 'L',
    ITCH5X_MT_MWCB_DECLINE_LEVEL       = 'V',
    ITCH5X_MT_MWCB_STATUS              = 'W',
    ITCH5X_MT_IPO_QUOTING_UPDATE       = 'K',
    ITCH5X_MT_ADD_ORDER                = 'A',
    ITCH5X_MT_ADD_ORDER_ATTRIB         = 'F',
    ITCH5X_MT_ORDER_EXECUTED           = 'E',
    ITCH5X_MT_ORDER_EXECUTED_PRICE     = 'C',
    ITCH5X_MT_ORDER_CANCEL             = 'X',
    ITCH5X_MT_ORDER_DELETE             = 'D',
    ITCH5X_MT_ORDER_REPLACE            = 'U',
    ITCH5X_MT_TRADE                    = 'P',
    ITCH5X_MT_CROSS_TRADE              = 'Q',
    ITCH5X_MT_BROKEN_TRADE             = 'B',
    ITCH5X_MT_NOII                     = 'I',
    ITCH5X_MT_RPII                     = 'N',
};
_Static_assert(sizeof(enum itch5x_message_type) >= 1,
        "Not enough bits to encode enum itch5x_message_type");

struct itch5x_add_order {
    uint8_t message_type;
    uint16_t stock_locate;
    uint16_t tracking_number;
    uint8_t timestamp[6];
    uint64_t order_reference_number;
    uint8_t side;
    uint32_t shares;
    uint8_t stock[8];
    uint32_t price;
} __attribute__((packed));
_Static_assert(sizeof(struct itch5x_add_order) == 36,
        "Incorrect size for struct itch5x_add_order");

__attribute__((always_inline)) inline
void bswap_itch5x_add_order(struct itch5x_add_order *restrict val) {
    val->stock_locate = bswap_16(val->stock_locate);
    val->tracking_number = bswap_16(val->tracking_number);
    val->order_reference_number = bswap_64(val->order_reference_number);
    inplace_bswap_48(val->timestamp);
    val->shares = bswap_32(val->shares);
    val->price = bswap_32(val->price);
}

#if 0
struct itch5x_add_order_attrib {
} __attribute__((packed));
_Static_assert(sizeof(struct itch5x_add_order_attrib),
        "Incorrect size for struct itch5x_add_order_attrib");

struct itch5x_order_executed {
} __attribute__((packed));
_Static_assert(sizeof(struct itch5x_order_executed),
        "Incorrect size for struct itch5x_order_executed");

struct itch5x_order_executed_price {
} __attribute__((packed));
_Static_assert(sizeof(struct itch5x_order_executed_price),
        "Incorrect size for struct itch5x_order_executed_price");

struct itch5x_order_cancel {
} __attribute__((packed));
_Static_assert(sizeof(struct itch5x_order_cancel),
        "Incorrect size for struct itch5x_order_cancel");

struct itch5x_order_delete {
} __attribute__((packed));
_Static_assert(sizeof(struct itch5x_order_delete),
        "Incorrect size for struct itch5x_order_delete");

struct itch5x_order_replace {
} __attribute__((packed));
_Static_assert(sizeof(struct itch5x_order_replace),
        "Incorrect size for struct itch5x_order_replace");

struct itch5x_trade {
} __attribute__((packed));
_Static_assert(sizeof(struct itch5x_trade),
        "Incorrect size for struct itch5x_trade");
#endif

