#pragma once

#include "bswap_util.h"

/* Do not edit.  Generated by 'wiregen.py itch5x.idl' */

enum itch5x_message_type {
    ITCH5X_MT_SYSTEM_EVENT             = 'S',
    ITCH5X_MT_STOCK_DIRECTORY          = 'R',
    ITCH5X_MT_STOCK_TRADING_ACTION     = 'H',
    ITCH5X_MT_REG_SHO_RESTRICTED_IND   = 'Y',
    ITCH5X_MT_MKT_PARTICIPANT_POSITION = 'L',
    ITCH5X_MT_MWCB_DECLINE_LEVEL       = 'V',
    ITCH5X_MT_MWCB_STATUS              = 'W',
    ITCH5X_MT_IPO_QUOTING_UPDATE       = 'K',
    ITCH5X_MT_ADD_ORDER                = 'A',
    ITCH5X_MT_ADD_ORDER_ATTRIB         = 'F',
    ITCH5X_MT_ORDER_EXECUTED           = 'E',
    ITCH5X_MT_ORDER_EXECUTED_PRICE     = 'C',
    ITCH5X_MT_ORDER_CANCEL             = 'X',
    ITCH5X_MT_ORDER_DELETE             = 'D',
    ITCH5X_MT_ORDER_REPLACE            = 'U',
    ITCH5X_MT_TRADE                    = 'P',
    ITCH5X_MT_CROSS_TRADE              = 'Q',
    ITCH5X_MT_BROKEN_TRADE             = 'B',
    ITCH5X_MT_NOII                     = 'I',
    ITCH5X_MT_RPII                     = 'N',
};
_Static_assert(sizeof(enum itch5x_message_type) >= 1,
        "Not enough bits to encode enum itch5x_message_type");

enum itch5x_side {
    ITCH5X_SIDE_BUY  = 'B',
    ITCH5X_SIDE_SELL = 'S',
};
_Static_assert(sizeof(enum itch5x_side) >= 1,
        "Not enough bits to encode enum itch5x_side");

struct itch5x_add_order {
    uint8_t message_type;
    uint16_t stock_locate;
    uint16_t tracking_number;
    uint8_t timestamp[6];
    uint64_t order_reference_number;
    uint8_t side;
    uint32_t shares;
    uint8_t stock[8];
    uint32_t price;
} __attribute__((packed));
_Static_assert(sizeof(struct itch5x_add_order) == 36,
        "Incorrect size for struct itch5x_add_order");

__attribute__((always_inline)) inline
void bswap_itch5x_add_order(struct itch5x_add_order *restrict val) {
    val->stock_locate = bswap_16(val->stock_locate);
    val->tracking_number = bswap_16(val->tracking_number);
    inplace_bswap_48(val->timestamp);
    val->order_reference_number = bswap_64(val->order_reference_number);
    val->shares = bswap_32(val->shares);
    val->price = bswap_32(val->price);
}

struct itch5x_add_order_attrib {
    uint8_t message_type;
    uint16_t stock_locate;
    uint16_t tracking_number;
    uint8_t timestamp[6];
    uint64_t order_reference_number;
    uint8_t side;
    uint32_t shares;
    uint8_t stock[8];
    uint32_t price;
    uint8_t mpid[4];
} __attribute__((packed));
_Static_assert(sizeof(struct itch5x_add_order_attrib) == 40,
        "Incorrect size for struct itch5x_add_order_attrib");

__attribute__((always_inline)) inline
void bswap_itch5x_add_order_attrib(struct itch5x_add_order_attrib *restrict val) {
    val->stock_locate = bswap_16(val->stock_locate);
    val->tracking_number = bswap_16(val->tracking_number);
    inplace_bswap_48(val->timestamp);
    val->order_reference_number = bswap_64(val->order_reference_number);
    val->shares = bswap_32(val->shares);
    val->price = bswap_32(val->price);
}

struct itch5x_order_executed {
    uint8_t message_type;
    uint16_t stock_locate;
    uint16_t tracking_number;
    uint8_t timestamp[6];
    uint64_t order_reference_number;
    uint32_t executed_shares;
    uint64_t match_number;
} __attribute__((packed));
_Static_assert(sizeof(struct itch5x_order_executed) == 31,
        "Incorrect size for struct itch5x_order_executed");

__attribute__((always_inline)) inline
void bswap_itch5x_order_executed(struct itch5x_order_executed *restrict val) {
    val->stock_locate = bswap_16(val->stock_locate);
    val->tracking_number = bswap_16(val->tracking_number);
    inplace_bswap_48(val->timestamp);
    val->order_reference_number = bswap_64(val->order_reference_number);
    val->executed_shares = bswap_32(val->executed_shares);
    val->match_number = bswap_64(val->match_number);
}

struct itch5x_order_executed_price {
    uint8_t message_type;
    uint16_t stock_locate;
    uint16_t tracking_number;
    uint8_t timestamp[6];
    uint64_t order_reference_number;
    uint32_t executed_shares;
    uint64_t match_number;
    uint8_t printable;
    uint32_t execution_price;
} __attribute__((packed));
_Static_assert(sizeof(struct itch5x_order_executed_price) == 36,
        "Incorrect size for struct itch5x_order_executed_price");

__attribute__((always_inline)) inline
void bswap_itch5x_order_executed_price(struct itch5x_order_executed_price *restrict val) {
    val->stock_locate = bswap_16(val->stock_locate);
    val->tracking_number = bswap_16(val->tracking_number);
    inplace_bswap_48(val->timestamp);
    val->order_reference_number = bswap_64(val->order_reference_number);
    val->executed_shares = bswap_32(val->executed_shares);
    val->match_number = bswap_64(val->match_number);
    val->execution_price = bswap_32(val->execution_price);
}

struct itch5x_order_cancel {
    uint8_t message_type;
    uint16_t stock_locate;
    uint16_t tracking_number;
    uint8_t timestamp[6];
    uint64_t order_reference_number;
    uint32_t canceled_shares;
} __attribute__((packed));
_Static_assert(sizeof(struct itch5x_order_cancel) == 23,
        "Incorrect size for struct itch5x_order_cancel");

__attribute__((always_inline)) inline
void bswap_itch5x_order_cancel(struct itch5x_order_cancel *restrict val) {
    val->stock_locate = bswap_16(val->stock_locate);
    val->tracking_number = bswap_16(val->tracking_number);
    inplace_bswap_48(val->timestamp);
    val->order_reference_number = bswap_64(val->order_reference_number);
    val->canceled_shares = bswap_32(val->canceled_shares);
}

struct itch5x_order_delete {
    uint8_t message_type;
    uint16_t stock_locate;
    uint16_t tracking_number;
    uint8_t timestamp[6];
    uint64_t order_reference_number;
} __attribute__((packed));
_Static_assert(sizeof(struct itch5x_order_delete) == 19,
        "Incorrect size for struct itch5x_order_delete");

__attribute__((always_inline)) inline
void bswap_itch5x_order_delete(struct itch5x_order_delete *restrict val) {
    val->stock_locate = bswap_16(val->stock_locate);
    val->tracking_number = bswap_16(val->tracking_number);
    inplace_bswap_48(val->timestamp);
    val->order_reference_number = bswap_64(val->order_reference_number);
}

struct itch5x_order_replace {
    uint8_t message_type;
    uint16_t stock_locate;
    uint16_t tracking_number;
    uint8_t timestamp[6];
    uint64_t orig_order_reference_number;
    uint64_t new_order_reference_number;
    uint32_t shares;
    uint32_t price;
} __attribute__((packed));
_Static_assert(sizeof(struct itch5x_order_replace) == 35,
        "Incorrect size for struct itch5x_order_replace");

__attribute__((always_inline)) inline
void bswap_itch5x_order_replace(struct itch5x_order_replace *restrict val) {
    val->stock_locate = bswap_16(val->stock_locate);
    val->tracking_number = bswap_16(val->tracking_number);
    inplace_bswap_48(val->timestamp);
    val->orig_order_reference_number = bswap_64(val->orig_order_reference_number);
    val->new_order_reference_number = bswap_64(val->new_order_reference_number);
    val->shares = bswap_32(val->shares);
    val->price = bswap_32(val->price);
}

struct itch5x_trade {
    uint8_t message_type;
    uint16_t stock_locate;
    uint16_t tracking_number;
    uint8_t timestamp[6];
    uint64_t order_reference_number;
    uint8_t unused;
    uint32_t shares;
    uint8_t stock[8];
    uint32_t price;
    uint64_t match_number;
} __attribute__((packed));
_Static_assert(sizeof(struct itch5x_trade) == 44,
        "Incorrect size for struct itch5x_trade");

__attribute__((always_inline)) inline
void bswap_itch5x_trade(struct itch5x_trade *restrict val) {
    val->stock_locate = bswap_16(val->stock_locate);
    val->tracking_number = bswap_16(val->tracking_number);
    inplace_bswap_48(val->timestamp);
    val->order_reference_number = bswap_64(val->order_reference_number);
    val->shares = bswap_32(val->shares);
    val->price = bswap_32(val->price);
    val->match_number = bswap_64(val->match_number);
}

struct itch5x_cross_trade {
    uint8_t message_type;
    uint16_t stock_locate;
    uint16_t tracking_number;
    uint8_t timestamp[6];
    uint64_t shares;
    uint8_t stock[8];
    uint32_t cross_price;
    uint64_t match_number;
    uint8_t cross_type;
} __attribute__((packed));
_Static_assert(sizeof(struct itch5x_cross_trade) == 40,
        "Incorrect size for struct itch5x_cross_trade");

__attribute__((always_inline)) inline
void bswap_itch5x_cross_trade(struct itch5x_cross_trade *restrict val) {
    val->stock_locate = bswap_16(val->stock_locate);
    val->tracking_number = bswap_16(val->tracking_number);
    inplace_bswap_48(val->timestamp);
    val->shares = bswap_64(val->shares);
    val->cross_price = bswap_32(val->cross_price);
    val->match_number = bswap_64(val->match_number);
}

struct itch5x_noii {
    uint8_t message_type;
    uint16_t stock_locate;
    uint16_t tracking_number;
    uint8_t timestamp[6];
    uint64_t paired_shares;
    uint64_t imbalance_shares;
    uint8_t imbalance_direction;
    uint8_t stock[8];
    uint32_t far_price;
    uint32_t near_price;
    uint32_t reference_price;
    uint8_t cross_type;
    uint8_t price_variation_ind;
} __attribute__((packed));
_Static_assert(sizeof(struct itch5x_noii) == 50,
        "Incorrect size for struct itch5x_noii");

__attribute__((always_inline)) inline
void bswap_itch5x_noii(struct itch5x_noii *restrict val) {
    val->stock_locate = bswap_16(val->stock_locate);
    val->tracking_number = bswap_16(val->tracking_number);
    inplace_bswap_48(val->timestamp);
    val->paired_shares = bswap_64(val->paired_shares);
    val->imbalance_shares = bswap_64(val->imbalance_shares);
    val->far_price = bswap_32(val->far_price);
    val->near_price = bswap_32(val->near_price);
    val->reference_price = bswap_32(val->reference_price);
}

