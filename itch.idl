enum bits(8) prefix(ITCH_MT_) itch_msg_type {
    SYSTEM_EVENT_MESSAGE      = 'S',
    STOCK_DIRECTORY           = 'R',
    STOCK_TRADING_ACTION      = 'H',
    REG_SHO_INDICATOR         = 'Y',
    MKT_PARTICIPANT_POSITION  = 'L',
    MWCB_LEVEL_DECLINE        = 'V',
    MWCB_STATUS               = 'W',
    IPO_QUOTING_PERIOD_UPDATE = 'K',
    ADD_ORDER                 = 'A',
    ADD_ORDER_ATTRIBUTED      = 'F',
    ORDER_EXECUTED            = 'E',
    ORDER_EXECUTED_WITH_PRICE = 'C',
    ORDER_CANCEL              = 'X',
    ORDER_DELETE              = 'D',
    ORDER_REPLACE             = 'U',
    TRADE                     = 'P',
    CROSS_TRADE               = 'Q',
    BROKEN_TRADE              = 'B',
    NOII                      = 'I',
    RPII                      = 'N',
}

enum bits(8) prefix(ITCH_EVENT_CODE_) itch_event_code {
    START_OF_MESSAGES     = 'O',
    START_OF_SYSTEM_HOURS = 'S',
    START_OF_MKT_HOURS    = 'Q',
    END_OF_MKT_HOURS      = 'M',
    END_OF_SYSTEM_HOURS   = 'E',
    END_OF_MESSAGES       = 'C',
}

enum bits(8) prefix(ITCH_BUY_SELL_INDICATOR_) itch_buy_sell_indicator {
    BUY  = 'B',
    SELL = 'S',
}

typedef u48 timestamp;

struct bytes(11) itch_msg_header {
    itch_msg_type message_type;
    u16           stock_locate;
    u16           tracking_number;
    timestamp     timestamp;
}

struct bytes(12) itch_system_event {
    itch_msg_type message_type;
    u16           stock_locate;
    u16           tracking_number;
    timestamp     timestamp;
    c8            event_code;
}

struct bytes(36) itch_add_order {
    itch_msg_type           message_type;
    u16                     stock_locate;
    u16                     tracking_number;
    timestamp               timestamp;
    u64                     order_reference_number;
    itch_buy_sell_indicator buy_sell_indicator;
    u32                     shares;
    c8[8]                   stock;
    u32                     price;
}


